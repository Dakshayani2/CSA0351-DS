
using System;
using System.Collections.Generic;


public class Graph {

	
	private int v;

	
	private List<int>[] adjList;


	public Graph(int vertices)
	{

		
		this.v = vertices;

		
		initAdjList();
	}

	
	private void initAdjList()
	{
		adjList = new List<int>[v];

		for (int i = 0; i < v; i++) {
			adjList[i] = new List<int>();
		}
	}


	public void addEdge(int u, int v)
	{
		
		adjList[u].Add(v);
	}

	
	public void printAllPaths(int s, int d)
	{
		bool[] isVisited = new bool[v];
		List<int> pathList = new List<int>();

	
		pathList.Add(s);

		
		printAllPathsUtil(s, d, isVisited, pathList);
	}

	
	private void printAllPathsUtil(int u, int d,
								bool[] isVisited,
								List<int> localPathList)
	{

		if (u.Equals(d)) {
			Console.WriteLine(string.Join(" ", localPathList));
			
			return;
		}

		
		isVisited[u] = true;

		
		foreach(int i in adjList[u])
		{
			if (!isVisited[i]) {
				
				localPathList.Add(i);
				printAllPathsUtil(i, d, isVisited,
								localPathList);

				
				localPathList.Remove(i);
			}
		}

		
		isVisited[u] = false;
	}

	
	public static void Main(String[] args)
	{
		
		Graph g = new Graph(4);
		g.addEdge(0, 1);
		g.addEdge(0, 2);
		g.addEdge(0, 3);
		g.addEdge(2, 0);
		g.addEdge(2, 1);
		g.addEdge(1, 3);

		
		int s = 2;

		
		int d = 3;

		Console.WriteLine("Following are all different"
						+ " paths from " + s + " to " + d);
		g.printAllPaths(s, d);
	}
}

